from tkinter import *
import requests
import customtkinter as ctk
import requests, base64
import geocoder
import datetime
from PIL import Image
from tkinter import messagebox 

g = geocoder.ip('me')  # l·∫•y th√¥ng tin t·ª´ ip c√° nh√¢n
apikey="73a13f26ae664ffe56f68cf1e3d93903"   #key api


class Currentweatherframe(ctk.CTkFrame):# b·∫£n m·∫´u, m·ªôt khu√¥n m·∫´u. ·ªû ƒë√≥ ta khai b√°o c√°c thu·ªôc t√≠nh  v√† ph∆∞∆°ng th·ª©c 

   
    def __init__(self,parent): #chay khi class ƒëc k√≠ch ho·∫°t
        
        super().__init__(parent)# kh·ªüi t·∫°o ch·∫°y c√°i parent(l·ªõp cha m·∫π ·ªü ƒë√¢y l√† App trong file main.py)

                
    
        self.configure(fg_color='#5c9ce4') # m√†u n·ªÅn

        self.grid(row=0,column=0,sticky='wens') # c√°ch ƒë·∫∑t frame
      
        self.columnconfigure(0,weight=0,pad=20)#  \ 
        self.rowconfigure(0,weight=0,pad=30)#      \
        self.rowconfigure(1,weight=0,pad=0)#        |--> setup pad,ƒë·ªô l·ªõn,c·ªßa c√°c h√†ng,c·ªôt
        self.rowconfigure(2,weight=0,pad=85)#      /
        self.rowconfigure(3,weight=0,pad=230)#    /
        

        #khung search
        container0=ctk.CTkFrame(self,fg_color='#5c9ce4')  #t·∫°o frame
        container0.grid(row=0,column=0)     #ƒë·∫∑t frame
        searchentry=ctk.CTkEntry(container0,  #\
                                 placeholder_text='Enter city name',    \
                                 placeholder_text_color='black',#       \
                                 height=40,width=200,#                   \
                                 border_width=0,corner_radius=10,#        |->ch·ªânh cho √¥ t√¨m ki·ªÉm
                                 text_color='black',#                    /
                                 fg_color='#e4f2ff')#                   /
        searchentry.pack(side=TOP)  #c√°ch ƒë·∫∑t √¥ t√¨m ki·∫øm
        searchentry.bind("<Return>", (lambda event: city_search(searchentry.get()))) # ch·∫°y h√†m khi ng∆∞·ªùi d√πng ·∫•n enter khi ƒëang focus v√†o √¥ t√¨m ki·∫øm,lambda d√πng ƒë·ªÉ ch·∫°y h√†m khi h√†m ch∆∞a ƒëc t·∫°o(h√†m ·∫©n danh)


        #khung tr·∫£ l·∫°i ƒë·ªØ li·ªáu(th√†nh ph·ªë v√† gi·ªù)
        container=ctk.CTkFrame(self,fg_color='#5c9ce4')
        container.grid(row=1,column=0)
        container.columnconfigure(0,pad=30)
        container.columnconfigure(1,pad=30)
        container.rowconfigure(0,pad=10)
        container.rowconfigure(1,pad=10)
        city=ctk.CTkLabel(container,text='Searching: Ha Noi',font=('Helvetica',20,'bold'))
        city.grid(row=1,column=0)
        val1=ctk.CTkLabel(container,text='Nan',font=('Helvetica',20,'bold'))
        val1.grid(row=1,column=1)
        time=ctk.CTkLabel(container,text=f'üìç {g.city.lower()}',font=('Helvetica',18))
        time.grid(row=0,column=0)
        val2=ctk.CTkLabel(container,text='nan',font=('Helvetica',18))
        val2.grid(row=0,column=1)



        #khung tr·∫£ l·∫°i ƒë·ªØ li·ªáu(nhi·ªát ƒë·ªô, t√¨nh tr·∫°ng th·ªùi ti·∫øt)
        container1=ctk.CTkFrame(self,fg_color='#5c9ce4')
        container1.grid(row=2,column=0)
        container1.columnconfigure(0,weight=0)
        container1.columnconfigure(1,weight=0)
        container1.columnconfigure(2,weight=0)
        container1.rowconfigure(0,weight=1,pad=10)
        container1.rowconfigure(1,weight=1,pad=10)
        temp=ctk.CTkLabel(container1,text='_‚ÑÉ',font=('Helvetica',60))
        temp.grid(row=0,column=1)
        type=ctk.CTkLabel(container1,text='Nan',font=('Helvetica',15,'bold'))
        type.grid(row=1,column=1)
         

        #khung h√¨nh ·∫£nh th·ªùi ti·∫øt v√† minh ho·∫° 
        bottomcontainer=ctk.CTkFrame(self,fg_color='#5c9ce4')
        bottomcontainer.place(relx=0.25, rely=0.82, anchor=CENTER)
        cityimglabel1=ctk.CTkLabel(self,text='')
        cityimglabel1.place(relx=0.5, rely=0.5, anchor=CENTER)
        cityimg=ctk.CTkImage(light_image=Image.open('./buildings.png'),size=(300,300))
        cityimglabel=ctk.CTkLabel(bottomcontainer,image=cityimg,text='')
        cityimglabel.pack()
        
         


        
       ##################H√ÄM###############
        
            #1. H√†m l·∫•y c√°c t√¥ng tin v·ªÅ nhi·ªát ƒë·ªô, th·ªùi ti·∫øt 
        def fetch_weather_conditions(weather_data,x):
                    current_temp = (weather_data.json()['main']['temp']-32)*5/9
                    temp.configure(text=f'{round(current_temp,1)}‚ÑÉ')          #ch·ªânh nhi·ªát ƒë·ªô
                    weathericon=weather_data.json()['weather'][0]['icon']   
                    city.configure(text=x)                  #ch·ªânh t√™n th√†nh ph·ªë
                    type.configure(text=weather_data.json()['weather'][0]['main'])  #ch·ªânh t√™n th·ªùi ti·∫øt
                    url = f'http://openweathermap.org/img/wn/{weathericon}@4x.png' #fetch h√¨nh ·∫£nh th·ªùi ti·∫øt
                    response = requests.get(url,stream=True)
                    print(response)
                    a=base64.encodebytes(response.raw.read()) #base64 d√πng m√£ ho√° h√¨nh ·∫£nh
                    b=PhotoImage(data=a)        #PhotoImage c·ªßa tkinter cho ph√©p chuy·ªÉn ·∫£nh m√£ ho√° th√†nh ·∫£nh
                    cityimglabel1.configure(image=b)    #ch·ªânh ·∫£nh
                    
                    time_fetched(weather_data)
                    
                   
            #2. H√†m l·∫•y/update th·ªùi gian th·ª±c(local time) 
        def time_update(weather_data):
                    fmt = "%b,%d %H:%M"   # d·∫°ng v√≠ d·ª• Feb.12 12:20
                    time=weather_data.json()['timezone'] 
                    tz = datetime.timezone(datetime.timedelta(seconds=int(time)))   #chuy·ªÉn timedelta th√†nh timezone
                    now_time=datetime.datetime.now(tz = tz).strftime(fmt)   
                    val2.configure(text=now_time)
                    val2.after(60000,time_update,weather_data) # after d√πng ƒë·ªÉ l·∫∑p l·∫°i c√°i h√†m n√†y sau kho·∫£ng th·ªùi gian
            #3. H√†m l·∫•y th·ªùi gian th·ª±c(GMT time) 

        def time_fetched(weather_data):
                    fmt = "%b,%d %H:%M" # d·∫°ng v√≠ d·ª• Feb.12 12:20
                    time=weather_data.json()['timezone']
                    tz = datetime.timezone(datetime.timedelta(seconds=int(time))) #chuy·ªÉn timedelta th√†nh timezone
                    now_time=datetime.datetime.now(tz = tz).strftime(fmt) #strftime d√πng ƒë·ªÉ th·ªÉ hi·ªán th·ªùi gian ·ªü d·∫°ng
                    val1.configure(text=now_time)
             

            #4. H√†m fetch data t·ª´ open weather api(qua √¥ t√¨m ki·∫øm)
       

        def city_search(x):
                print('enter press')    
                weather_data=requests.get(               #request d√πng ƒë·ªÉ g·ª≠i m·ªôt y√™u c·∫ßu http, trong tr∆∞·ªùng h·ª£p n√†y s·∫Ω l√† GET      
                    f"https://api.openweathermap.org/data/2.5/weather?q={x}&units=imperial&APPID={apikey}"
                    )
                if weather_data.json()['cod'] == '404': #ki·ªÉm tra th√†nh ph·ªë c√≥ t·ªìn t·∫°i
                    messagebox.showerror("ERROR", "City not found !") 
                else:
                    fetch_weather_conditions(weather_data,x) 
            #4. H√†m fetch data t·ª´ open weather api(qua v·ªã tr√≠ b·∫£n th√¢n)                                     
    
                    
        def initial_city_search():
            weather_data=requests.get(
                    f"https://api.openweathermap.org/data/2.5/weather?q={g.city.lower()}&units=imperial&APPID={apikey}"
                    )
            if weather_data.json()['cod'] == '404':
                    messagebox.showerror("ERROR", "City not found !") 
            else:
                    
            
                    fetch_weather_conditions(weather_data,g.city.lower())
        
            time_update(weather_data)
        initial_city_search()  
        
          
